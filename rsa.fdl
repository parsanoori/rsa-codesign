ipblock myarm{
    iptype "armsystem";
    ipparm "exec=rsa";
    ipparm "period=1";
}

ipblock arm_gcd_in_a(out data : ns(64)){
    iptype "armsystemsource";
    ipparm "core=myarm";
    ipparm "address=0x80000000";
}

ipblock arm_gcd_in_b(out data : ns(64)){
    iptype "armsystemsource";
    ipparm "core=myarm";
    ipparm "address=0x80000008";
}

ipblock arm_gcd_out(in data : ns(64)){
    iptype "armsystemsink";
    ipparm "core=myarm";
    ipparm "address=0x80000010";
}

ipblock arm_gcd_load(out data : ns(1)){
    iptype "armsystemsource";
    ipparm "core=myarm";
    ipparm "address=0x80000018";
}

ipblock arm_gcd_done(in data : ns(1)){
    iptype "armsystemsink";
    ipparm "core=myarm";
    ipparm "address=0x8000001c";
}



ipblock arm_pow_in_b(out data : ns(64)){
    iptype "armsystemsource";
    ipparm "core=myarm";
    ipparm "address=0x80000020";
}

ipblock arm_pow_in_e(out data : ns(64)){
    iptype "armsystemsource";
    ipparm "core=myarm";
    ipparm "address=0x80000028";
}

ipblock arm_pow_in_m(out data : ns(64)){
    iptype "armsystemsource";
    ipparm "core=myarm";
    ipparm "address=0x80000030";
}

ipblock arm_pow_out(in data : ns(64)){
    iptype "armsystemsink";
    ipparm "core=myarm";
    ipparm "address=0x80000038";
}

ipblock arm_pow_load(out data : ns(1)){
    iptype "armsystemsource";
    ipparm "core=myarm";
    ipparm "address=0x80000040";
}

ipblock arm_pow_done(in data : ns(1)){
    iptype "armsystemsink";
    ipparm "core=myarm";
    ipparm "address=0x80000044";
}



dp gcd_dp(
    in  a_in   :   ns(64);
    in  b_in   :   ns(64);
    in  load:   ns(1);
    out o   :   ns(64);
    out done:   ns(1)
) {
    reg a, b: ns(64);

    always {
        o = b;
    }

    sfg ready {
        done = 0;
    }

    sfg init {
        a = a_in;
        b = b_in;
        done = 0;
    }

    sfg loop {
        a = b;
        b = a%b;
        done = 0;
    }

    sfg outp_idle {
        done = 1;
    }

    sfg log {
        $display("GCD: ", "cycle=", $cycle, " a=", a, " b=", b, " load=", load, " o=", o, " done=", done);
    }
}

fsm gcd_fsm(gcd_dp) {
    initial s0;
    state s1, s2;
    @s0 
        if (load) then (init) -> s1;
        else (ready) -> s0;
    @s1 
        if (a%b==0) then (outp_idle) -> s2;
        else (loop, log) -> s1;
    @s2 if (load) then (outp_idle) -> s2;
        else (ready) -> s0;
}


dp pow_dp (
    in  b   :   ns(64);
    in  e   :   ns(64);
    in  m   :   ns(64);
    in  load:   ns(1);
    out o   :   ns(64);
    out done:   ns(1)
) {
    reg acc, i : ns(64);

    always {
        o = acc;
    }

    sfg ready {
        done = 0;
    }

    sfg init {
        acc = 1;
        i = 0;
        done = 0;
    }

    sfg loop {
        acc = (acc * b) % m;
        i = i + 1;
        done = 0;
    }

    sfg outp_idle {
        done = 1;
    }

    sfg log {
        $display("POWER: ","cycle=", $cycle, " b=", b, " e=", e, " m=", m, " load=", load, " o=", o, " acc=", acc, " done=", done);
    }
}

fsm pow_fsm(pow_dp) {
    initial s0;
    state s1, s2;

    @s0 
        if (load) then (init) -> s1;
        else (ready) -> s0;
    @s1 
        if (i==e) then (outp_idle) -> s2;
        else (loop,log) -> s1;
    @s2 if (load) then (outp_idle) -> s2;
        else (ready) -> s0;
}

dp top() {
    sig gcd_in_a, gcd_out : ns(64);
    sig gcd_in_b : ns(64);
    sig gcd_load, gcd_done : ns(1);
    sig pow_in_b, pow_in_e, pow_in_m, pow_out : ns(64);
    sig pow_load, pow_done : ns(1);

    use myarm;

    use arm_gcd_in_a(gcd_in_a);
    use arm_gcd_in_b(gcd_in_b);
    use arm_gcd_out(gcd_out);
    use arm_gcd_load(gcd_load);
    use arm_gcd_done(gcd_done);

    use arm_pow_in_b(pow_in_b);
    use arm_pow_in_e(pow_in_e);
    use arm_pow_in_m(pow_in_m);
    use arm_pow_out(pow_out);
    use arm_pow_load(pow_load);
    use arm_pow_done(pow_done);

    use gcd_dp(gcd_in_a, gcd_in_b, gcd_load, gcd_out, gcd_done);
    use pow_dp(pow_in_b, pow_in_e, pow_in_m, pow_load, pow_out, pow_done);
}

system S {
    top;
}
