ipblock myarm{
    iptype "armsystem";
    ipparm "exec=rsa";
    ipparm "period=1";
}

ipblock arm_gcd_in_a(out data : ns(64)){
    iptype "armsystemsource";
    ipparm "core=myarm";
    ipparm "address=0x80000000";
}

ipblock arm_gcd_in_b(out data : ns(64)){
    iptype "armsystemsource";
    ipparm "core=myarm";
    ipparm "address=0x80000008";
}

ipblock arm_gcd_out(in data : ns(64)){
    iptype "armsystemsink";
    ipparm "core=myarm";
    ipparm "address=0x80000010";
}

ipblock arm_gcd_load(out data : ns(1)){
    iptype "armsystemsource";
    ipparm "core=myarm";
    ipparm "address=0x80000018";
}

ipblock arm_gcd_done(in data : ns(1)){
    iptype "armsystemsink";
    ipparm "core=myarm";
    ipparm "address=0x8000001c";
}



ipblock arm_pow_in_b(out data : ns(64)){
    iptype "armsystemsource";
    ipparm "core=myarm";
    ipparm "address=0x80000020";
}

ipblock arm_pow_in_e(out data : ns(64)){
    iptype "armsystemsource";
    ipparm "core=myarm";
    ipparm "address=0x80000028";
}

ipblock arm_pow_in_m(out data : ns(64)){
    iptype "armsystemsource";
    ipparm "core=myarm";
    ipparm "address=0x80000030";
}

ipblock arm_pow_out(in data : ns(64)){
    iptype "armsystemsink";
    ipparm "core=myarm";
    ipparm "address=0x80000038";
}

ipblock arm_pow_load(out data : ns(1)){
    iptype "armsystemsource";
    ipparm "core=myarm";
    ipparm "address=0x80000040";
}

ipblock arm_pow_done(in data : ns(1)){
    iptype "armsystemsink";
    ipparm "core=myarm";
    ipparm "address=0x80000044";
}



dp gcd_dp(
    in  e   :   ns(64);
    in  z   :   ns(64);
    in  load:   ns(1);
    out c   :   ns(64);
    out done:   ns(1)
) {
    reg e_in : ns(64);
    reg z_in : ns(64);
    reg e_cal: ns(64);
    reg c_out : ns(64);
    reg lda : ns(1);
    reg done_gcd : ns(1);

    always {
        lda = load;
        c = e_cal;
        done = (e_cal >= z | c_out == 1);
    }

    sfg init {
        e_in = e;
        z_in = z;
        e_cal = e;
        c_out = 0;
    }

    sfg reduce {
        e_in = (e_in > z_in) ? e_in - z_in : e_in;
        z_in = (e_in > z_in) ? z_in : z_in - e_in;
        c_out = (e_in > z_in) ? e_in : z_in;
        done_gcd = e_in == 0 | z_in == 0;
    }

    sfg reduce_next {
        e_in = e_cal + 1;
        e_cal = e_cal + 1;
        z_in = z;
        done_gcd = 0;
    }

    sfg log {
        $display("gcd: cycle=", $cycle, " e=", e_cal, " z=", z, " c=", c, " done", done);
    }
}

fsm gcd_fsm(gcd_dp) {
    initial s0;
    state s1, s2;
    @s0 
        if (lda) then (init, log) -> s1;
        else (log) -> s0;
    @s1 
        if (done) then (log) -> s2;
        else if (done_gcd) then (reduce_next, log) -> s1;
        else (reduce, log) -> s1;
    @s2 (log) -> s2;
}

//hardwired gendata_wired(gendata) {
//    run;
//}


dp pow_dp (
    in  a   :   ns(32);
    in  b   :   ns(32);
    in  n   :   ns(32);
    in  load:   ns(1);
    out c   :   ns(32);
    out done:   ns(1)
) {
    reg a_in, b_in, c_out, d, i : ns(32);
    reg lda : ns(1);

    always {
        lda = load;
        c = c_out;
        done = i >= b;
    }

    sfg init {
        a_in = a;
        b_in = b;
        i = 0;
        c_out = 1;
    }

    sfg mul {
        c_out = (a_in * c_out) % n;
        i = i + 1;
    }

    sfg log {
        $display("cycle=", $cycle, " a=", a_in, " b=", b_in, " c=", c, " done", done);
    }
}

fsm pow_fsm(pow_dp) {
    initial s0;
    state s1, s2;

    @s0 
        if (lda) then (init, log) -> s1;
        else (log) -> s0;
    @s1 
        if (done) then (log) -> s2;
        else (mul, log) -> s1;
    @s2 (log) -> s2;

}

dp top() {
    sig gcd_in_a, gcd_out : ns(64);
    sig gcd_in_b : ns(64);
    sig gcd_load, gcd_done : ns(1);
    sig pow_in_b, pow_in_e, pow_in_m, pow_out : ns(64);
    sig pow_load, pow_done : ns(1);

    use myarm;

    use arm_gcd_in_a(gcd_in_a);
    use arm_gcd_in_b(gcd_in_b);
    use arm_gcd_out(gcd_out);
    use arm_gcd_load(gcd_load);
    use arm_gcd_done(gcd_done);

    use arm_pow_in_b(pow_in_b);
    use arm_pow_in_e(pow_in_e);
    use arm_pow_in_m(pow_in_m);
    use arm_pow_out(pow_out);
    use arm_pow_load(pow_load);
    use arm_pow_done(pow_done);

    use gcd_dp(gcd_in_a, gcd_in_b, gcd_load, gcd_out, gcd_done);
    use pow_dp(pow_in_b, pow_in_e, pow_in_m, pow_load, pow_out, pow_done);
}

system S {
    top;
}
