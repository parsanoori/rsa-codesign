dp gcd_dp(
    in  e   :   ns(32);
    in  z   :   ns(32);
    in  load:   ns(1);
    out c   :   ns(32);
    out done:   ns(1)
) {
    reg e_in : ns(32);
    reg z_in : ns(32);
    reg e_cal: ns(32);
    reg c_out : ns(32);
    reg lda : ns(1);
    reg done_gcd : ns(1);

    always {
        lda = load;
        c = e_cal;
        done = (e_cal >= z | c_out == 1);
    }

    sfg init {
        e_in = e;
        z_in = z;
        e_cal = e;
        c_out = 0;
    }

    sfg reduce {
        e_in = (e_in > z_in) ? e_in - z_in : e_in;
        z_in = (e_in > z_in) ? z_in : z_in - e_in;
        c_out = (e_in > z_in) ? e_in : z_in;
        done_gcd = e_in == 0 | z_in == 0;
    }

    sfg reduce_next {
        e_in = e_cal + 1;
        e_cal = e_cal + 1;
        z_in = z;
        done_gcd = 0;
    }

    sfg log {
        $display("gcd: cycle=", $cycle, " e=", e_cal, " z=", z, " c=", c, " done", done);
    }
}

fsm gcd_fsm(gcd_dp) {
    initial s0;
    state s1, s2;
    @s0 
        if (lda) then (init, log) -> s1;
        else (log) -> s0;
    @s1 
        if (done) then (log) -> s2;
        else if (done_gcd) then (reduce_next, log) -> s1;
        else (reduce, log) -> s1;
    @s2 (log) -> s2;
}

dp choose_d_dp(
    in  e   :   ns(32);
    in  z   :   ns(32);
    in  d   :   ns(32);
    in  load:   ns(1);
    out c   :   ns(32);
    out done:   ns(1)
) {
    reg d_cal: ns(32);
    reg c_out : ns(32);
    reg lda, done_out : ns(1);

    always {
        done = ((d_cal * e) % z) == 1 | d_cal >= z;
        c = d_cal;
        lda = load;
    }

    sfg init {
        d_cal = d;
    }

    sfg reduce_next {
        d_cal = d_cal + 1;
    }

    sfg log {
        $display("choose d: cycle=", $cycle, " e=", e, " z=", z, " c=", c, " d=", d_cal, " done=", done);
    }
}

fsm choose_d_fsm(choose_d_dp) {
    initial s0;
    state s1, s2;
    @s0 
        if (lda) then (init, log) -> s1;
        else (log) -> s0;
    @s1 
        if (done) then (log) -> s2;
        else (reduce_next, log) -> s1;
    @s2 (log) -> s2;
}

dp gendata(
    out e   :   ns(32);
    out lda :   ns(1);
    out d   :   ns(32);
    out z   :   ns(32);
    out msg :   ns(32);
    out n   :   ns(32)
) {
    sfg run {
        e = 2;
        lda = 1;
        d = 2;
        z = 24;
        msg = 33;
        n = 35;
    }
}

hardwired gendata_wired(gendata) {
    run;
}

dp logger(
    in  data    :   ns(32)
) {
    always {
        $display("cycle=", $cycle, " data: ", data);
    }
}

dp pow_dp (
    in  a   :   ns(32);
    in  b   :   ns(32);
    in  n   :   ns(32);
    in  load:   ns(1);
    out c   :   ns(32);
    out done:   ns(1)
) {
    reg a_in, b_in, c_out, d, i : ns(32);
    reg lda : ns(1);

    always {
        lda = load;
        c = c_out;
        done = i >= b;
    }

    sfg init {
        a_in = a;
        b_in = b;
        i = 0;
        c_out = 1;
    }

    sfg mul {
        c_out = (a_in * c_out) % n;
        i = i + 1;
    }

    sfg log {
        $display("cycle=", $cycle, " a=", a_in, " b=", b_in, " c=", c, " done", done);
    }
}

fsm pow_fsm(pow_dp) {
    initial s0;
    state s1, s2;

    @s0 
        if (lda) then (init, log) -> s1;
        else (log) -> s0;
    @s1 
        if (done) then (log) -> s2;
        else (mul, log) -> s1;
    @s2 (log) -> s2;

}

dp top() {
    sig e_before, z, e_after, d_after, d_before, c, n : ns(32);
    sig done_gcd, lda, done_choose, done_power : ns(1);
    sig msg : ns(32);
    use gendata(e_before, lda, d_before, z, msg, n);
    //use logger(e_before);
    use gcd_dp(e_before, z, lda, e_after, done_gcd);
    use choose_d_dp(e_after, z, d_before, done_gcd, d_after, done_choose);
    use pow_dp(msg, e_after, n, done_choose, c, done_power);
}

system S {
    top;
}